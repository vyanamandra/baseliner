---
# tasks file for vm-consul-config

- name: get private ip of each of the hosts
  register: "private_ip"
  become: true
  when: ("consul_nodes" in group_names)
  ansible.builtin.shell:
    cmd: hostname -I | awk '{print $1}'

- name: Create /opt/consul/tls on all Consul nodes
  become: true
  ansible.builtin.file:
    path: '/opt/consul/tls'
    state: directory
  when: (CONSUL_VM_TLS_ENABLED|bool and DC_NODES in group_names)

- name: Create /opt/consul/systemctl-service-configs on all Consul nodes
  become: true
  ansible.builtin.file:
    path: '/opt/consul/systemctl-service-configs'
    state: directory
  when: DC_NODES in group_names

- name: Create /opt/consul/data-dir on all Consul nodes
  become: true
  ansible.builtin.file:
    path: '/opt/consul/data-dir'
    state: directory
  when: DC_NODES in group_names

- name: Generate TLS Certifying Authority
  become: true
  when: (CONSUL_VM_TLS_ENABLED|bool and DC_MGMT in group_names)
  ansible.builtin.shell:
    chdir: /opt/consul/tls/
    cmd: consul tls ca create 

- name: Generate TLS certificates for Servers
  become: true
  when: (CONSUL_VM_TLS_ENABLED|bool and DC_MGMT in group_names)
  ansible.builtin.shell:
    chdir: /opt/consul/tls/
    cmd: consul tls cert create -server -node '*' -dc {{ DC_NAME }}

- name: Generate TLS certificate for Clients
  become: true
  when: (CONSUL_VM_TLS_ENABLED|bool and DC_MGMT in group_names)
  ansible.builtin.shell:
    chdir: /opt/consul/tls/
    cmd: consul tls cert create -client -dc {{ DC_NAME }}

- name: Compress /opt/consul/tls/ directory
  become: true
  when: (CONSUL_VM_TLS_ENABLED|bool and DC_MGMT in group_names)
  community.general.archive:
    path: '/opt/consul/tls/*'
    dest: '/opt/consul/tls/tls.tgz'

- name: Make local directory that we can then use to transfer to other remote servers
  ansible.builtin.file:
    recurse: true
    path: 'output/tls/vm-{{ DC_NAME }}'
    state: directory
  when: (CONSUL_VM_TLS_ENABLED|bool and DC_MGMT in group_names)
  delegate_to: localhost

- name: Fetch the zipped tls file from the remote host to local
  become: true
  ansible.builtin.fetch:
    flat: yes
    src: "/opt/consul/tls/tls.tgz"
    dest: "{{ playbook_dir }}/output/tls/vm-{{ DC_NAME }}/"
  when: (CONSUL_VM_TLS_ENABLED|bool and DC_MGMT in group_names)

- name: Extract the files in the remote /opt/consul/tls directory
  become: true
  ansible.builtin.unarchive:
    copy: true
    src: "{{ playbook_dir }}/output/tls/vm-{{ DC_NAME }}/tls.tgz"
    dest: "/opt/consul/tls/"
  when: (CONSUL_VM_TLS_ENABLED|bool and DC_NODES in group_names)

#- debug: var=inventory_hostname

#- debug: var=group_names

#- debug: var=groups[DC_MGMT]

- name: Arrive at an encrypt string to be used on all nodes of the cluster for gossip encryption
  become: true
  when: (CONSUL_VM_GOSSIP_ENABLED|bool and DC_MGMT in group_names)
  ansible.builtin.shell:
    cmd: consul keygen
  register: "gossip_encryption_token"

- name: Set gossip_encrypt_{{ DC_NORM }}
  set_fact: 
    gossip_encrypt_{{ DC_NORM }}: "{{ gossip_encryption_token['stdout'] }}"
  when: (CONSUL_VM_GOSSIP_ENABLED|bool and DC_MGMT in group_names)

- name: Transfer hcl files to /etc/consul.d/
  become: true
  template:
    src: "{{ item }}"
    dest: /etc/consul.d/{{ item | basename | regex_replace('\.j2$', '') }}
  with_fileglob:
    - "{{ playbook_dir }}/roles/consul-common-templates/templates/*.j2"
  when: DC_NODES in group_names


- name: Transfer Consul server config to the consul server nodes
  become: true
  template:
    src: "{{ playbook_dir }}/roles/consul-common-templates/templates/srv/consul-server.hcl.j2"
    dest: /etc/consul.d/consul.hcl
    owner: consul
    group: consul
    mode: "u=rw,g=r,o=r"
  when: DC_SERVERS in group_names

- name: Transfer Consul client config to the consul client nodes
  become: true
  template:
    src: "{{ playbook_dir }}/roles/consul-common-templates/templates/cli/consul-client.hcl.j2"
    dest: /etc/consul.d/consul.hcl
    owner: consul
    group: consul
    mode: "u=rw,g=r,o=r"
  when: DC_CLIENTS in group_names

- name: Replace single quotes with double quotes on {{ DC_NODES }}
  become: true
  when: DC_NODES in group_names
  ansible.builtin.shell:
    cmd: for f in $(ls /etc/consul.d/*.hcl); do sed -i "s/'/\"/g" "${f}"; done

- name: Set group and owner to Consul over /etc/consul.d 
  become: true
  file: dest=/etc/consul.d owner=consul group=consul recurse=yes

- name: Set group and owner to Consul over /opt/consul
  become: true
  file: dest=/opt/consul owner=consul group=consul recurse=yes

- name: Restart the consul service in the servers
  become: true
  when: DC_NODES in group_names
  ansible.builtin.systemd_service:
    name: consul
    state: restarted

- name: Ensure that the consul service started and that there is a leader already before bootstrapping. Try this loop for 30 times if needed.
  become: true
  when: (CONSUL_VM_ACL_ENABLED|bool and DC_MGMT in group_names)
  ansible.builtin.shell:
    cmd: for x in $(seq 1 30); do if [[ $(curl -sk {{CONSUL_HTTP_ADDR_LOC}}/v1/internal/ui/services -o-) =~ '[]' ]]; then echo 'This consul cluster has a new leader'; break; else echo 'The cluster is yet to elect a new leader. Sleeping for 5 seconds before checking again'; fi; done

- name: Bootstrap consul now that there is a new leader
  become: true
  when: (CONSUL_VM_ACL_ENABLED|bool and DC_MGMT in group_names)
  register: "bootstrap_token"
  ansible.builtin.shell:
    cmd: consul acl bootstrap  | grep ^SecretID | tr -d ' ' | awk -F ':' '{print $2}'
  environment:
    CONSUL_HTTP_SSL_VERIFY: "false"
    CONSUL_HTTP_ADDR: "{{ CONSUL_HTTP_ADDR_LOC }}"
  
- name: Print the boostrap token of the datacenter <{{ DC_NAME }}> to stdout for reference.
  debug: 
    msg: "Bootstrap token is: <{{ bootstrap_token['stdout'] }}>"
  when: (CONSUL_VM_ACL_ENABLED|bool and DC_MGMT in group_names)

- name: Set bootstrap_token_{{ DC_NORM }}
  set_fact:
    bootstrap_token_{{ DC_NORM }}: "{{ bootstrap_token['stdout'] }}"
  when: (CONSUL_VM_ACL_ENABLED|bool and DC_MGMT in group_names)


- name: Remove the prior CONSUL_HTTP_TOKEN, CONSUL_HTTP_SSL_VERIFY, CONSUL_HTTP_ADDR env vars from ~/.bashrc
  when: (CONSUL_VM_ACL_ENABLED|bool and DC_NODES in group_names)
  become: true
  ansible.builtin.shell:
    cmd: sed -i '/^export CONSUL_HTTP_TOKEN/d;/^export CONSUL_HTTP_SSL_VERIFY/d;/^export CONSUL_HTTP_ADDR/d' ~/.bashrc

- name: Save the bootstrap token to ~/.bashrc of the root user
  when: (CONSUL_VM_ACL_ENABLED|bool and DC_NODES in group_names)
  become: true
  ansible.builtin.shell:
    cmd: echo "export CONSUL_HTTP_TOKEN={{ groups[DC_MGMT] | map('extract', hostvars, 'bootstrap_token_' + DC_NORM) | list | join('') }}" >> ~/.bashrc

- name: Save CONSUL_HTTP_ADDR and CONSUL_HTTP_SSL_VERIFY values in .bashrc of the root user. Ideally want this to be from /etc/profile
  when: DC_NODES in group_names
  become: true
  ansible.builtin.shell:
    cmd: echo 'export CONSUL_HTTP_SSL_VERIFY=false\nexport CONSUL_HTTP_ADDR="{{ CONSUL_HTTP_ADDR_LOC }}"\n' >> ~/.bashrc

- name: Generate agent tokens for each of the consul nodes and set them
  when: (CONSUL_VM_ACL_ENABLED|bool and DC_NODES in group_names)
  become: true
  ansible.builtin.shell:
    cmd: . ~/.bashrc 2>/dev/null && consul acl set-agent-token agent $(consul acl token create -node-identity=$(grep node_name /etc/consul.d/consul.hcl | cut -f 2 -d '=' | tr -d ' "'):{{ DC_NAME }} | grep ^SecretID | tr -d ' ' | awk -F ':' '{print $2}')

- name: Fill the template for a replication token and place the file in the primary dc mgmt node for the next step.
  become: true
  when: DC_MGMT in group_names and CONSUL_VM_ACL_ENABLED|bool and (CONSUL_TRADITIONAL_MESH_ENABLED|bool or CONSUL_MESH_GATEWAY_ENABLED|bool)
  template: 
    src: "{{ playbook_dir }}/roles/consul-common-templates/templates/acl-tokens/acl-replication-policy.hcl.j2"
    dest: "/root/acl-replication-policy.hcl"

- name: Create the replication policy using the file /root/acl-replication-policy.hcl already present in - {{ groups[DC_MGMT] }}
  become: true
  when: DC_MGMT in group_names and CONSUL_VM_ACL_ENABLED|bool and (CONSUL_TRADITIONAL_MESH_ENABLED|bool or CONSUL_MESH_GATEWAY_ENABLED|bool)
  ansible.builtin.shell:
    cmd: >
      . ~/.bashrc 2>/dev/null \
      && consul acl policy create \
          {% if 'ent' in CONSUL_VM_VERSION %} -partition "default" -namespace "default" {% endif %} \
          -name "acl-replication-policy" -rules @/root/acl-replication-policy.hcl -description "ACL replication policy" \
      && consul acl token create \
          {% if 'ent' in CONSUL_VM_VERSION %} -partition "default" -namespace "default" {% endif %}  \
          -description "ACL Replication Token" -policy-name "acl-replication-policy" > /root/acl-replication-token.txt

- name: Send mesh-gateway-policy.hcl.j2 to /root/mesh-gateway-policy.hcl on the PRIMARY_DC_MGMT node
  become: true
  template: 
    src: "{{ playbook_dir }}/roles/consul-common-templates/templates/mesh-services/mesh-gateway-policy.hcl.j2"
    dest: "/root/mesh-gateway-policy.hcl"
  when: DC_MGMT in group_names and CONSUL_VM_ACL_ENABLED|bool and CONSUL_MESH_GATEWAY_ENABLED|bool

- name: Create a Mesh Gateway policy using the file /root/mesh-gateway-policy.hcl already present in - {{ groups[DC_MGMT] }}
  become: true
  when: DC_MGMT in group_names and CONSUL_VM_ACL_ENABLED|bool and CONSUL_MESH_GATEWAY_ENABLED|bool
  ansible.builtin.shell:
    cmd: >
      . ~/.bashrc 2>/dev/null \
      && consul acl policy create \
          {% if 'ent' in CONSUL_VM_VERSION %} -partition "default" -namespace "default" {% endif %} \
          -name "mesh-gateway-policy" -rules @/root/mesh-gateway-policy.hcl -description "Mesh gateway policy" \
      && consul acl token create \
          {% if 'ent' in CONSUL_VM_VERSION %} -partition "default" -namespace "default" {% endif %}  \
          -description "Mesh Gateway Token" -policy-name "mesh-gateway-policy" > /root/mesh-gateway-token.txt

- name: Query consul members
  when: DC_MGMT in group_names
  become: true
  register: "consul_members"
  ansible.builtin.shell:
    cmd: . ~/.bashrc 2>/dev/null && consul members 

- debug: var=consul_members
